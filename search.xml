<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue开发跨域请求]]></title>
    <url>%2Fxukeler.github.io%2F2019%2F04%2F08%2FVue%E5%BC%80%E5%8F%91%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%2F</url>
    <content type="text"><![CDATA[在Vue-cli搭建的项目结构中的 config/index.js 配置文件中配置代理服务器。 123456789101112131415161718dev: &#123; env: require('./dev.env'), port: 8080, autoOpenBrowser: true, assetsSubDirectory: 'static', assetsPublicPath: '/', //proxyTable: &#123;&#125;, proxyTable:&#123; '/apis': &#123; // 测试环境 target: 'http://api.veblen.com', // 接口域名 changeOrigin: true, //是否跨域 pathRewrite: &#123; '^/apis': 'apis' //需要rewrite重写的, &#125; &#125;, cssSourceMap: false &#125; 请求路径就会被映射http://api.veblem.com/apis/getData]]></content>
  </entry>
  <entry>
    <title><![CDATA[js面向对象编程]]></title>
    <url>%2Fxukeler.github.io%2F2019%2F03%2F21%2Fjs%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[JavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Function 是JS自带的函数对象。 最简单的封装 1234567var Cat = &#123; name : '', color : '' &#125; 构造函数模式：所谓”构造函数”，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。 123456789101112131415function Cat(name,color)&#123; this.name=name; this.color=color; this.eat=function()&#123; alert(this.name+"吃老鼠") &#125;&#125;var cat=new Cat("大貓","red");cat.eat();//每一個實例對象都有一個constructor屬性指向它的構造函數console.log(cat.constructor); 原型对象模式，构造函数的原型对象的this指向构造函数，new生成的实例对象只包含原型对象上的方法。 1234567891011121314151617function Cat(name,color)&#123; this.name=name; this.color=color; &#125;Cat.prototype.eat=function()&#123; alert(this.name+"要吃老鼠");&#125;var cat1=new Cat("大貓","red");var cat2=new Cat("二貓","purple");// console.log(cat1.eat==cat2.eat)cat2.eat();]]></content>
  </entry>
  <entry>
    <title><![CDATA[闭包]]></title>
    <url>%2Fxukeler.github.io%2F2019%2F03%2F21%2F%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[闭包：从字面意思来理解就是封闭和包裹，换句话说，就是在函数内部定义的变量，在函数的外部无法访问到，因此就说函数构成了一个闭包。说白了闭包是作用域的应用。 闭包的作用域链包含着它自己的作用域，以及包含它的函数的作用域和全局作用域。 创建闭包最常见方式，就是在一个函数内部创建另一个函数。下面例子中的 closure 就是一个闭包： 12345678function func()&#123; var a = 1,b = 2; function closure()&#123; return a+b; &#125; return closure;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[let&const&var的区别]]></title>
    <url>%2Fxukeler.github.io%2F2019%2F03%2F20%2Flet-const-var%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[对var来说 js中只有全局作用域和局部作用域,let和const存在块级作用域,不存在变量提升刚. ES6新增let变量声明命令，用法类似于var但是只在let命令所在的代码块有效，存在块级作用域 ES6新增const声明命令，const声明一个只读的常量，一旦声明，常量的值就不能改变。一旦声明就必须赋值，否则会报错。 1234567891011121314151617&lt;script&gt; //对var来说 js中只有全局作用域和局部作用域 // 局部作用域只在函数内部存在 // es6新增块级作用域 // 例 var sum=0; for(var i=0;i&lt;6;i++)&#123; sum+=i &#125; console.log(i) //得到的结果是6 for(let j=0;j&lt;6;j++)&#123; sum+=j; &#125; console.log(j) //得到的是undefined let在代码块里面声明的变量只能在块级作用域访问到 //声明一个常量 const PI=3.14; &lt;/script&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Vue动态组件]]></title>
    <url>%2Fxukeler.github.io%2F2019%2F03%2F20%2FVue%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Vue提供了 component 标签,来展示对应名称的组件 component 是一个占位符, :is 属性,可以用来指定要展示的组件的名称 通过标签的is属性实现组件的切换。 1234567891011121314151617181920212223&lt;div id="app"&gt; &lt;a href="" @click.prevent="res='com1'"&gt;登陆&lt;/a&gt; &lt;a href="" @click.prevent="res='com2'"&gt;注册&lt;/a&gt; &lt;component :is="res"&gt;&lt;/component&gt; &lt;/div&gt; &lt;script&gt; Vue.component("com2",&#123; template:` &lt;div&gt; &lt;h1&gt;登陆&lt;/h1&gt; &lt;/div&gt;` &#125;) Vue.component("com1",&#123; template:`&lt;div&gt; &lt;h1&gt;注册&lt;/h1&gt; &lt;/div&gt;` &#125;) var app=new Vue(&#123; el:"#app", data:&#123; res:"com1" &#125; &#125;) &lt;/script&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Vue创建组件的三种方法]]></title>
    <url>%2Fxukeler.github.io%2F2019%2F03%2F20%2FVue%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Vue中有多种创建组件的方式 第一种使用Vue.extend创建全局的Vue模板。然后使用Vue.component绑定模板。 12345678910111213141516&lt;div id="app"&gt; &lt;com1&gt;&lt;/com1&gt; &lt;/div&gt; &lt;script&gt; var com=Vue.extend(&#123; template:` &lt;div&gt; &lt;h1&gt;今天的天气很好&lt;/h1&gt; &lt;/div&gt; ` &#125;) Vue.component("com1",com) var app=new Vue(&#123; el:"#app", &#125;) &lt;/script&gt; 第二种，将Vue.extend写在Vue.component里面。 12345678910111213141516&lt;div id="app"&gt; &lt;com1&gt;&lt;/com1&gt; &lt;/div&gt; &lt;script&gt; Vue.component("com1",Vue.extend(&#123; //或者 Vue.component("com1",&#123; template:` &lt;div&gt; &lt;h1&gt;今天的天气很好&lt;/h1&gt; &lt;/div&gt; ` &#125;)) var app=new Vue(&#123; el:"#app", &#125;) &lt;/script&gt; 第三种直接在html中写template模板标签，绑定Vue.component的id，通过组名名标签引用。好处是语法高亮，且有提示。 12345678910111213141516&lt;div id="app"&gt; &lt;com1&gt;&lt;/com1&gt; &lt;/div&gt; &lt;template id="com"&gt; &lt;div&gt; &lt;h1&gt;你还好吗&lt;/h1&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; Vue.component("com1",&#123; template:`#com` &#125;) var app=new Vue(&#123; el:"#app", &#125;) &lt;/script&gt; 注意模板template要有唯一的顶层元素]]></content>
  </entry>
  <entry>
    <title><![CDATA[js隐式转换]]></title>
    <url>%2Fxukeler.github.io%2F2019%2F03%2F17%2Fjs%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[js属于弱类型语言，在编程的过程中存在隐式类型装换。 1. 对象和Boolean对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字 1[] == true; //false []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false 2.对象和字符串对象和字符串进行比较时，对象转换为字符串，然后两者进行比较 1[1,2,3] == '1,2,3' // true [1,2,3]转化为'1,2,3'，然后和'1,2,3'， 所以结果为true; 3.对象和数字对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较 1[1] == 1; // true `对象先转换为字符串再转换为数字，二者再比较 [1] =&gt; '1' =&gt; 1 所以结果为true 4. 字符串和数字字符串和数字进行比较时，字符串转换成数字，二者再比较 1'1' == 1 // true 5. 字符串和Boolean字符串和布尔值进行比较时，二者全部转换成数值再比较 1'1' == true; // true 6.Boolean和数字布尔值和数字进行比较时，布尔转换为数字，二者比较 1true == 1 // true 7.对象和字符串对象和字符串进行比较时，对象转换为字符串，然后两者进行比较 1[1,2,3] == '1,2,3' // true [1,2,3]转化为'1,2,3'，然后和'1,2,3'， 所以结果为true;]]></content>
  </entry>
  <entry>
    <title><![CDATA[es5数组常用方法]]></title>
    <url>%2Fxukeler.github.io%2F2019%2F03%2F17%2Fes5%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[es5浏览器兼容： Opera 11+ Firefox 3.6+ Safari 5+ Chrome 8+ Internet Explorer 9+ 1. forEachforEach是Array新方法中最基本的一个，就是遍历，循环。如下： 123456789//之前var arr=[1,2,3,4,5];for(var i=0;i&lt;arr.length;i++)&#123; console.log(i)//1 2 3 4 5&#125;//forEacharr.forEach(function(value,index,array)&#123; console.log(value)//1 2 3 4 5&#125;) 2. map调用数组的每个元素传递给指定的函数，并返回一个包含返回值的新数组；传递给map()的函数有返回值，map()返回新数组，不会修改调用的数组； 12345var arr=[1,2,3,4,5];var arr2=arr.map(function(x)&#123; return x*x&#125;)//arr2=[1, 4, 9, 16, 25] 3. filter返回数组的一个子集，回调函数用于逻辑判断是否返回，返回true则把当前元素加入到返回数组中，false则不加； 1234567var arr=[1,2,3,4,5];var arr2=arr.filter(function(x)&#123; if(x&gt;3)&#123; return true; &#125;&#125;)//arr2=[4, 5] 4. everyevery是“所有”函数的每个回调函数都返回true的时候才会返回true，当遇到false的时候终止执行，返回false； 12345var arr=[1,2,3,4,5];var flag=arr.every(function(x)&#123; return x&gt;3&#125;)//false 5. somesome函数是“存在”有一个回调函数返回true的时候终止执行并返回true，否则返回false； 12345var arr=[1,2,3,4,5];var flag=arr.some(function(x)&#123; return x&gt;3&#125;)//true]]></content>
  </entry>
</search>
