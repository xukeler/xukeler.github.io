<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xukeler</title>
  
  <subtitle>生命不息，开发不止！</subtitle>
  <link href="/xukeler.github.io/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-21T13:56:03.531Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xu Chang Jing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js面向对象编程</title>
    <link href="http://yoursite.com/2019/03/21/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/03/21/js面向对象编程/</id>
    <published>2019-03-21T13:41:49.000Z</published>
    <updated>2019-03-21T13:56:03.531Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Function 是JS自带的函数对象。</p><ul><li>最简单的封装</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>构造函数模式：所谓”构造函数”，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.color=color;</span><br><span class="line"><span class="keyword">this</span>.eat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name+<span class="string">"吃老鼠"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat=<span class="keyword">new</span> Cat(<span class="string">"大貓"</span>,<span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line">cat.eat();</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一個實例對象都有一個constructor屬性指向它的構造函數</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.constructor);</span><br></pre></td></tr></table></figure><ul><li>原型对象模式，构造函数的原型对象的this指向构造函数，new生成的实例对象只包含原型对象上的方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.color=color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype.eat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name+<span class="string">"要吃老鼠"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1=<span class="keyword">new</span> Cat(<span class="string">"大貓"</span>,<span class="string">"red"</span>);</span><br><span class="line"><span class="keyword">var</span> cat2=<span class="keyword">new</span> Cat(<span class="string">"二貓"</span>,<span class="string">"purple"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(cat1.eat==cat2.eat)</span></span><br><span class="line">cat2.eat();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Function 是JS自带的函数对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最简单的封装&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="http://yoursite.com/2019/03/21/%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2019/03/21/闭包/</id>
    <published>2019-03-21T13:31:24.000Z</published>
    <updated>2019-03-21T13:37:48.953Z</updated>
    
    <content type="html"><![CDATA[<p>闭包：从字面意思来理解就是封闭和包裹，换句话说，就是在函数内部定义的变量，在函数的外部无法访问到，因此就说函数构成了一个闭包。说白了闭包是作用域的应用。</p><ul><li>闭包的作用域链包含着它自己的作用域，以及包含它的函数的作用域和全局作用域。</li><li>创建闭包最常见方式，就是在一个函数内部创建另一个函数。下面例子中的 closure 就是一个闭包：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>,b = <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">closure</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> closure;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;闭包：从字面意思来理解就是封闭和包裹，换句话说，就是在函数内部定义的变量，在函数的外部无法访问到，因此就说函数构成了一个闭包。说白了闭包是作用域的应用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;闭包的作用域链包含着它自己的作用域，以及包含它的函数的作用域和全局作用域。&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>let&amp;const&amp;var的区别</title>
    <link href="http://yoursite.com/2019/03/20/let-const-var%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/03/20/let-const-var的区别/</id>
    <published>2019-03-20T03:13:26.000Z</published>
    <updated>2019-03-20T03:14:16.400Z</updated>
    
    <content type="html"><![CDATA[<ul><li>对<code>var</code>来说 js中只有<strong>全局作用域和局部作用域</strong>,<code>let</code>和<code>const</code>存在块级作用域,不存在变量提升刚.</li><li><strong>ES6新增</strong><code>let</code>变量声明命令，用法类似于<code>var</code>但是只在<code>let</code>命令所在的代码块有效，<strong>存在块级作用域</strong></li><li><strong>ES6新增</strong><code>const</code>声明命令，<code>const</code>声明一个只读的常量，一旦声明，常量的值就不能改变。一旦声明就必须赋值，否则会报错。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="comment">//对var来说 js中只有全局作用域和局部作用域</span></span><br><span class="line">       <span class="comment">// 局部作用域只在函数内部存在</span></span><br><span class="line">       <span class="comment">// es6新增块级作用域</span></span><br><span class="line">       <span class="comment">// 例</span></span><br><span class="line">       <span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">           sum+=i</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(i) <span class="comment">//得到的结果是6</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)&#123;</span><br><span class="line">           sum+=j;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(j) <span class="comment">//得到的是undefined  let在代码块里面声明的变量只能在块级作用域访问到</span></span><br><span class="line">       <span class="comment">//声明一个常量</span></span><br><span class="line">       <span class="keyword">const</span> PI=<span class="number">3.14</span>;</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;对&lt;code&gt;var&lt;/code&gt;来说 js中只有&lt;strong&gt;全局作用域和局部作用域&lt;/strong&gt;,&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;存在块级作用域,不存在变量提升刚.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ES6新增&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue动态组件</title>
    <link href="http://yoursite.com/2019/03/20/Vue%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/03/20/Vue动态组件/</id>
    <published>2019-03-20T03:09:02.000Z</published>
    <updated>2019-03-20T03:15:28.166Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue提供了-component-标签-来展示对应名称的组件"><a href="#Vue提供了-component-标签-来展示对应名称的组件" class="headerlink" title="Vue提供了 component 标签,来展示对应名称的组件"></a>Vue提供了 component 标签,来展示对应名称的组件</h3><ul><li>component 是一个占位符, :is 属性,可以用来指定要展示的组件的名称</li><li>通过<component>标签的is属性实现组件的切换。</component></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;a href=<span class="string">""</span> @click.prevent=<span class="string">"res='com1'"</span>&gt;登陆&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">       &lt;a href="" @click.prevent="res='com2'"&gt;注册&lt;/</span>a&gt;</span><br><span class="line">       &lt;component :is=<span class="string">"res"</span>&gt;&lt;/component&gt;</span><br><span class="line">   &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;script&gt;</span></span><br><span class="line"><span class="regexp">       Vue.component("com2",&#123;</span></span><br><span class="line"><span class="regexp">           template:` &lt;div&gt;</span></span><br><span class="line"><span class="regexp">               &lt;h1&gt;登陆&lt;/</span>h1&gt;</span><br><span class="line">           &lt;<span class="regexp">/div&gt;`</span></span><br><span class="line"><span class="regexp">       &#125;)</span></span><br><span class="line"><span class="regexp">       Vue.component("com1",&#123;</span></span><br><span class="line"><span class="regexp">           template:`&lt;div&gt;</span></span><br><span class="line"><span class="regexp">               &lt;h1&gt;注册&lt;/</span>h1&gt;</span><br><span class="line">           &lt;<span class="regexp">/div&gt;`</span></span><br><span class="line"><span class="regexp">       &#125;)</span></span><br><span class="line"><span class="regexp">       var app=new Vue(&#123;</span></span><br><span class="line"><span class="regexp">           el:"#app",</span></span><br><span class="line"><span class="regexp">           data:&#123;</span></span><br><span class="line"><span class="regexp">               res:"com1"</span></span><br><span class="line"><span class="regexp">           &#125;</span></span><br><span class="line"><span class="regexp">       &#125;)</span></span><br><span class="line"><span class="regexp">   &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue提供了-component-标签-来展示对应名称的组件&quot;&gt;&lt;a href=&quot;#Vue提供了-component-标签-来展示对应名称的组件&quot; class=&quot;headerlink&quot; title=&quot;Vue提供了 component 标签,来展示对应名称的组件&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue创建组件的三种方法</title>
    <link href="http://yoursite.com/2019/03/20/Vue%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/20/Vue创建组件的三种方法/</id>
    <published>2019-03-20T03:01:52.000Z</published>
    <updated>2019-03-20T03:04:43.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue中有多种创建组件的方式"><a href="#Vue中有多种创建组件的方式" class="headerlink" title="Vue中有多种创建组件的方式"></a>Vue中有多种创建组件的方式</h3><ul><li>第一种使用Vue.extend创建全局的Vue模板。然后使用Vue.component绑定模板。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;com1&gt;&lt;/com1&gt;</span><br><span class="line">   &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;script&gt;</span></span><br><span class="line"><span class="regexp">       var com=Vue.extend(&#123;</span></span><br><span class="line"><span class="regexp">           template:`</span></span><br><span class="line"><span class="regexp">               &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                   &lt;h1&gt;今天的天气很好&lt;/</span>h1&gt;</span><br><span class="line">               &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">           `</span></span><br><span class="line"><span class="regexp">       &#125;)</span></span><br><span class="line"><span class="regexp">       Vue.component("com1",com)</span></span><br><span class="line"><span class="regexp">      var app=new Vue(&#123;</span></span><br><span class="line"><span class="regexp">          el:"#app",</span></span><br><span class="line"><span class="regexp">      &#125;)</span></span><br><span class="line"><span class="regexp">   &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><ul><li>第二种，将Vue.extend写在Vue.component里面。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;com1&gt;&lt;/com1&gt;</span><br><span class="line">   &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;script&gt;</span></span><br><span class="line"><span class="regexp">       Vue.component("com1",Vue.extend(&#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/或者  Vue.component("com1",&#123;</span></span><br><span class="line"><span class="regexp">           template:`</span></span><br><span class="line"><span class="regexp">               &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                   &lt;h1&gt;今天的天气很好&lt;/</span>h1&gt;</span><br><span class="line">               &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">           `</span></span><br><span class="line"><span class="regexp">       &#125;))</span></span><br><span class="line"><span class="regexp">      var app=new Vue(&#123;</span></span><br><span class="line"><span class="regexp">          el:"#app",</span></span><br><span class="line"><span class="regexp">      &#125;)</span></span><br><span class="line"><span class="regexp">   &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><ul><li>第三种直接在html中写template模板标签，绑定Vue.component的id，通过组名名标签引用。好处是语法高亮，且有提示。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;com1&gt;&lt;/com1&gt;</span><br><span class="line">   &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;template id="com"&gt;</span></span><br><span class="line"><span class="regexp">       &lt;div&gt;</span></span><br><span class="line"><span class="regexp">           &lt;h1&gt;你还好吗&lt;/</span>h1&gt;</span><br><span class="line">       &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>template&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       Vue.component(<span class="string">"com1"</span>,&#123;</span><br><span class="line">           template:<span class="string">`#com`</span></span><br><span class="line">       &#125;)</span><br><span class="line">      <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">          el:<span class="string">"#app"</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意模板template要有唯一的顶层元素</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue中有多种创建组件的方式&quot;&gt;&lt;a href=&quot;#Vue中有多种创建组件的方式&quot; class=&quot;headerlink&quot; title=&quot;Vue中有多种创建组件的方式&quot;&gt;&lt;/a&gt;Vue中有多种创建组件的方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;第一种使用Vue.extend创
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js隐式转换</title>
    <link href="http://yoursite.com/2019/03/17/js%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2019/03/17/js隐式转换/</id>
    <published>2019-03-17T12:38:07.000Z</published>
    <updated>2019-03-17T12:58:52.325Z</updated>
    
    <content type="html"><![CDATA[<p>js属于弱类型语言，在编程的过程中存在隐式类型装换。</p><h3 id="1-对象和Boolean"><a href="#1-对象和Boolean" class="headerlink" title="1. 对象和Boolean"></a>1. 对象和Boolean</h3><p>对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] == <span class="literal">true</span>;  <span class="comment">//false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false</span></span><br></pre></td></tr></table></figure><h3 id="2-对象和字符串"><a href="#2-对象和字符串" class="headerlink" title="2.对象和字符串"></a>2.对象和字符串</h3><p>对象和字符串进行比较时，对象转换为字符串，然后两者进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == <span class="string">'1,2,3'</span> <span class="comment">// true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， 所以结果为true;</span></span><br></pre></td></tr></table></figure><h3 id="3-对象和数字"><a href="#3-对象和数字" class="headerlink" title="3.对象和数字"></a>3.对象和数字</h3><p>对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] == <span class="number">1</span>;  <span class="comment">// true  `对象先转换为字符串再转换为数字，二者再比较 [1] =&gt; '1' =&gt; 1 所以结果为true</span></span><br></pre></td></tr></table></figure><h3 id="4-字符串和数字"><a href="#4-字符串和数字" class="headerlink" title="4. 字符串和数字"></a>4. 字符串和数字</h3><p>字符串和数字进行比较时，字符串转换成数字，二者再比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1'</span> == <span class="number">1</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="5-字符串和Boolean"><a href="#5-字符串和Boolean" class="headerlink" title="5. 字符串和Boolean"></a>5. 字符串和Boolean</h3><p>字符串和布尔值进行比较时，二者全部转换成数值再比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-Boolean和数字"><a href="#6-Boolean和数字" class="headerlink" title="6.Boolean和数字"></a>6.Boolean和数字</h3><p>布尔值和数字进行比较时，布尔转换为数字，二者比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> == <span class="number">1</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="7-对象和字符串"><a href="#7-对象和字符串" class="headerlink" title="7.对象和字符串"></a>7.对象和字符串</h3><p>对象和字符串进行比较时，对象转换为字符串，然后两者进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js属于弱类型语言，在编程的过程中存在隐式类型装换。&lt;/p&gt;
&lt;h3 id=&quot;1-对象和Boolean&quot;&gt;&lt;a href=&quot;#1-对象和Boolean&quot; class=&quot;headerlink&quot; title=&quot;1. 对象和Boolean&quot;&gt;&lt;/a&gt;1. 对象和Boolean&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>es5数组常用方法</title>
    <link href="http://yoursite.com/2019/03/17/es5%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/17/es5数组方法/</id>
    <published>2019-03-17T07:50:27.122Z</published>
    <updated>2019-03-17T12:30:31.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="es5浏览器兼容："><a href="#es5浏览器兼容：" class="headerlink" title="es5浏览器兼容："></a>es5浏览器兼容：</h2><ul><li>Opera 11+</li><li>Firefox 3.6+</li><li>Safari 5+</li><li>Chrome 8+</li><li>Internet Explorer 9+</li></ul><h3 id="1-forEach"><a href="#1-forEach" class="headerlink" title="1. forEach"></a>1. forEach</h3><p>forEach是Array新方法中最基本的一个，就是遍历，循环。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之前</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)<span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forEach</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value)<span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-map"><a href="#2-map" class="headerlink" title="2. map"></a>2. map</h3><p>调用数组的每个元素传递给指定的函数，并返回一个包含返回值的新数组；传递给map()的函数有返回值，map()返回新数组，不会修改调用的数组；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2=arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> x*x</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//arr2=[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><h3 id="3-filter"><a href="#3-filter" class="headerlink" title="3. filter"></a>3. filter</h3><p>返回数组的一个子集，回调函数用于逻辑判断是否返回，返回true则把当前元素加入到返回数组中，false则不加；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2=arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(x&gt;<span class="number">3</span>)&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//arr2=[4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="4-every"><a href="#4-every" class="headerlink" title="4. every"></a>4. every</h3><p>every是“所有”函数的每个回调函数都返回true的时候才会返回true，当遇到false的时候终止执行，返回false；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> flag=arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> x&gt;<span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="5-some"><a href="#5-some" class="headerlink" title="5. some"></a>5. some</h3><p>some函数是“存在”有一个回调函数返回true的时候终止执行并返回true，否则返回false；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> flag=arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> x&gt;<span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;es5浏览器兼容：&quot;&gt;&lt;a href=&quot;#es5浏览器兼容：&quot; class=&quot;headerlink&quot; title=&quot;es5浏览器兼容：&quot;&gt;&lt;/a&gt;es5浏览器兼容：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Opera 11+&lt;/li&gt;
&lt;li&gt;Firefox 3.6+&lt;/li&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
