<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xukeler</title>
  
  <subtitle>生命不息，开发不止！</subtitle>
  <link href="/xukeler.github.io/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-17T12:58:52.325Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xu Chang Jing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js隐式转换</title>
    <link href="http://yoursite.com/2019/03/17/js%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2019/03/17/js隐式转换/</id>
    <published>2019-03-17T12:38:07.000Z</published>
    <updated>2019-03-17T12:58:52.325Z</updated>
    
    <content type="html"><![CDATA[<p>js属于弱类型语言，在编程的过程中存在隐式类型装换。</p><h3 id="1-对象和Boolean"><a href="#1-对象和Boolean" class="headerlink" title="1. 对象和Boolean"></a>1. 对象和Boolean</h3><p>对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] == <span class="literal">true</span>;  <span class="comment">//false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false</span></span><br></pre></td></tr></table></figure><h3 id="2-对象和字符串"><a href="#2-对象和字符串" class="headerlink" title="2.对象和字符串"></a>2.对象和字符串</h3><p>对象和字符串进行比较时，对象转换为字符串，然后两者进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == <span class="string">'1,2,3'</span> <span class="comment">// true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， 所以结果为true;</span></span><br></pre></td></tr></table></figure><h3 id="3-对象和数字"><a href="#3-对象和数字" class="headerlink" title="3.对象和数字"></a>3.对象和数字</h3><p>对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] == <span class="number">1</span>;  <span class="comment">// true  `对象先转换为字符串再转换为数字，二者再比较 [1] =&gt; '1' =&gt; 1 所以结果为true</span></span><br></pre></td></tr></table></figure><h3 id="4-字符串和数字"><a href="#4-字符串和数字" class="headerlink" title="4. 字符串和数字"></a>4. 字符串和数字</h3><p>字符串和数字进行比较时，字符串转换成数字，二者再比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1'</span> == <span class="number">1</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="5-字符串和Boolean"><a href="#5-字符串和Boolean" class="headerlink" title="5. 字符串和Boolean"></a>5. 字符串和Boolean</h3><p>字符串和布尔值进行比较时，二者全部转换成数值再比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-Boolean和数字"><a href="#6-Boolean和数字" class="headerlink" title="6.Boolean和数字"></a>6.Boolean和数字</h3><p>布尔值和数字进行比较时，布尔转换为数字，二者比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> == <span class="number">1</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="7-对象和字符串"><a href="#7-对象和字符串" class="headerlink" title="7.对象和字符串"></a>7.对象和字符串</h3><p>对象和字符串进行比较时，对象转换为字符串，然后两者进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js属于弱类型语言，在编程的过程中存在隐式类型装换。&lt;/p&gt;
&lt;h3 id=&quot;1-对象和Boolean&quot;&gt;&lt;a href=&quot;#1-对象和Boolean&quot; class=&quot;headerlink&quot; title=&quot;1. 对象和Boolean&quot;&gt;&lt;/a&gt;1. 对象和Boolean&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>es5数组常用方法</title>
    <link href="http://yoursite.com/2019/03/17/es5%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/17/es5数组方法/</id>
    <published>2019-03-17T07:50:27.122Z</published>
    <updated>2019-03-17T12:30:31.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="es5浏览器兼容："><a href="#es5浏览器兼容：" class="headerlink" title="es5浏览器兼容："></a>es5浏览器兼容：</h2><ul><li>Opera 11+</li><li>Firefox 3.6+</li><li>Safari 5+</li><li>Chrome 8+</li><li>Internet Explorer 9+</li></ul><h3 id="1-forEach"><a href="#1-forEach" class="headerlink" title="1. forEach"></a>1. forEach</h3><p>forEach是Array新方法中最基本的一个，就是遍历，循环。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之前</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)<span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forEach</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value)<span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-map"><a href="#2-map" class="headerlink" title="2. map"></a>2. map</h3><p>调用数组的每个元素传递给指定的函数，并返回一个包含返回值的新数组；传递给map()的函数有返回值，map()返回新数组，不会修改调用的数组；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2=arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> x*x</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//arr2=[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><h3 id="3-filter"><a href="#3-filter" class="headerlink" title="3. filter"></a>3. filter</h3><p>返回数组的一个子集，回调函数用于逻辑判断是否返回，返回true则把当前元素加入到返回数组中，false则不加；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2=arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(x&gt;<span class="number">3</span>)&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//arr2=[4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="4-every"><a href="#4-every" class="headerlink" title="4. every"></a>4. every</h3><p>every是“所有”函数的每个回调函数都返回true的时候才会返回true，当遇到false的时候终止执行，返回false；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> flag=arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> x&gt;<span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="5-some"><a href="#5-some" class="headerlink" title="5. some"></a>5. some</h3><p>some函数是“存在”有一个回调函数返回true的时候终止执行并返回true，否则返回false；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> flag=arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> x&gt;<span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;es5浏览器兼容：&quot;&gt;&lt;a href=&quot;#es5浏览器兼容：&quot; class=&quot;headerlink&quot; title=&quot;es5浏览器兼容：&quot;&gt;&lt;/a&gt;es5浏览器兼容：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Opera 11+&lt;/li&gt;
&lt;li&gt;Firefox 3.6+&lt;/li&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
